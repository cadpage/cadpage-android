package net.anei.cadpage;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.telephony.SmsMessage;
import android.telephony.TelephonyManager;
import android.telephony.SmsMessage.MessageClass;

public class SmsReceiver extends BroadcastReceiver {
  
  private static String EXTRA_REPEAT_LAST = "net.anei.cadpage.SmsReceive.REPEAT_LAST";

  @Override
  public void onReceive(Context context, Intent intent) {
    if (Log.DEBUG) Log.v("SMSReceiver: onReceive()");
    
    // If initialization failure in progress, shut down without doing anything
    if (TopExceptionHandler.isInitFailure()) return;

    SmsMmsMessage message = null;
    
    // If repeat_last flag is set, this is a fake intent instructing us
    // to reprocess the most recently recieved message (that passed the 
    // sender address filter
    if (intent.getBooleanExtra(EXTRA_REPEAT_LAST, false)) {
      message = SmsMsgLogBuffer.getInstance().getLastMessage();
    }
    // Otherwise convert Intent into an SMS/MSS message
    else {
      SmsMessage[] messages = SmsPopupUtils.getMessagesFromIntent(intent);
      if (messages == null) return;
      message = new SmsMmsMessage( messages,System.currentTimeMillis());
    }
    
    if (message == null) return;
    
    // Class 0 SMS, let the system handle this
    if (message.getMessageType() == SmsMmsMessage.MESSAGE_TYPE_SMS &&
        message.getMessageClass() == MessageClass.CLASS_0) return;

    // If the parser filter has been overridden, see if this passes the
    // user sender filter
    boolean overrideFilter = ManagePreferences.overrideFilter();
    String sFilter = "";
    if (overrideFilter) {
      sFilter = ManagePreferences.filter();
      String sAddress = message.getAddress();
      if (! SmsPopupUtils.matchFilter(sAddress, sFilter)) return;
    }
    if (Log.DEBUG) Log.v("SMSReceiver/CadPageCall: Filter Matches checking call Location -" + sFilter);
    
    // Save message for future test or error reporting use
    SmsMsgLogBuffer.getInstance().add(message);
    
    // See if the current parser will handle this message
    boolean genAlert = ManagePreferences.genAlert();
    boolean isPage = 
        ManageParsers.getInstance().getParser(null).isPageMsg(message, overrideFilter, genAlert);
    
    // If it didn't, see if we can accept this as a general page
    // which only happens if the general alert config settings is set and there
    // is an active user filter
    if (! isPage && genAlert && sFilter.length()>1) {
      isPage = ManageParsers.getInstance().getAlertParser().isPageMsg(message, overrideFilter, genAlert);
    }
    
    // If not a cad page, we're done with this
    if (! isPage) return;
  	
    // If it is, and we are not configured to do otherwise, 
    // abort broadcast to any other receivers
    if (! ManagePreferences.smspassthru()) abortBroadcast();

    // Add new message to the message queue
    SmsMessageQueue.getInstance().addNewMsg(message);
  
    // Notify user if so configured
    boolean notify = ManageNotification.show(context, message);
    
    // Determine if application should pop up right now
    boolean process = startApp(context);
    
    // If either a screen display or notification was generated by this
    // message, it is time to wake up the device.
    // After which we can release the power lock that kept the power on
    // until we got this far
    if (process ||  notify) ManageWakeLock.acquireFull(context);

    // And finally, launch the main application screen
    if (process) CallHistoryActivity.launchActivity(context, message);
  }


  /**
   * Determine if application should be launched when CAD page is received
   * @param context
   * @return
   */
  private boolean startApp(Context context) {

    // If popup isn't enabled, this is as afar as we go
    if (! ManagePreferences.popupEnabled()) return false;

    // Should popup should only show when keyguard is on
    if (ManagePreferences.onlyShowOnKeyguard()) {
      ManageKeyguard.initialize(context);
      if (! ManageKeyguard.inKeyguardRestrictedInputMode()) return false;
    }

    // Fetch call state, if the user is in a call or the phone is ringing we don't want to show the popup
    if (ManagePreferences.noShowInCall()) {
      TelephonyManager mTM = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
      boolean callStateIdle = mTM.getCallState() == TelephonyManager.CALL_STATE_IDLE;
      if (!callStateIdle) return false;
    }
    
    // Otherwise OK
    return true;
  }
  
  /**
   * Request most recently received page be reprocessed
   * @param context requesting context
   */
  public static void repeatLastPage(Context context) {
    Intent intent = new Intent("android.provider.Telephony.SMS_RECEIVED");
    intent.setClass(context, SmsReceiver.class);
    intent.putExtra(EXTRA_REPEAT_LAST, true);
    context.sendOrderedBroadcast(intent, null);
  }
}

